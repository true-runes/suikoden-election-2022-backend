name: 幻水総選挙2022 バックエンド

on:
  push:
  workflow_dispatch:

jobs:
  gss2022_backend:
    name: （PG services版）継続的インテグレーション
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ["18.x"]
        ruby-version: ["3.1"]
    env:
      RAILS_ENV: test
    # services:
      # postgres:
      #   image: postgres:14.3
      #   ports:
      #     - 5432:5432
      #   env:
      #     # POSTGRES_HOST_AUTH_METHOD: trust
      #     POSTGRES_USER: postgres
      #     POSTGRES_PASSWORD: postgres
      #     POSTGRES_DB: suikoden_election_2022_test
      #   options: >-
      #     --health-cmd pg_isready
      #     --health-interval 10s
      #     --health-timeout 5s
      #     --health-retries 5
    steps:
      - name: コードをチェックアウトする
        uses: actions/checkout@v3
      - name: Ruby のセットアップを行う
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby-version }}
          bundler-cache: true
      - name: Set up PostgreSQL
        uses: Harmon758/postgresql-action@v1
        with:
          postgresql user: test
          postgresql password: password
          postgresql version: 14.3
      - uses: actions/cache@v1
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-
      - name: （予定地）Node.js のセットアップを行う
        run: |
          echo 'Node.js を使うことがあれば "actions/setup-node" を用いる'
      # uses: actions/setup-node@v3
      # with:
      #   node-version: ${{ matrix.node-version }}
      #   cache: "yarn"
      # - name: Set env
      #     # echo "DATABASE_URL=postgres://postgres:postgres@localhost:5432/suikoden_election_2022_test" >> $GITHUB_ENV
      #   run: |
      #     echo "RAILS_ENV=test" >> $GITHUB_ENV
      - name: bundle install
        run: |
          gem install bundler
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3
          bundle exec rails db:prepare RAILS_ENV=test
        env:
          DATABASE_URL: 'postgres://test:password@localhost/suikoden_election_2022_test'
      # - name: db:setup (db:create db:schema:load db:migrate) or db:migrate する
      #   run: |
      #     bin/rails db:prepare
      #   env:
      #     RAILS_ENV: test
      #     POSTGRES_HOST: postgres
      #     POSTGRES_USERNAME_TEST: postgres
      #     POSTGRES_PASSWORD_TEST: postgres
      # - name: Setup tmate session
      #   uses: mxschmitt/action-tmate@v3
      #   if: ${{ github.ref_name == 'feat/add_github-actions_on_services-pg' }}
      #   timeout-minutes: 15
      #   with:
      #     sudo: true
      #     limit-access-to-actor: true
      # - name: DB接続確認 rails runner
      #   run: |
      #     bundle exec rails runner "puts Asset.new"
      #   env:
      #     RAILS_ENV: test
      #     POSTGRES_HOST: postgres
      #     POSTGRES_USERNAME_TEST: postgres
      #     POSTGRES_PASSWORD_TEST: postgres
        # env:
          # RAILS_ENV: test
          # POSTGRES_USERNAME_TEST: postgres
          # POSTGRES_PASSWORD_TEST: password
          # POSTGRES_HOST_TEST: postgres #=> 接続失敗する
          # POSTGRES_HOST: localhost
          # POSTGRES_PORT: 5432
          # POSTGRES_USERNAME_TEST: postgres
          # POSTGRES_PASSWORD_TEST: postgres
      # - name: Wait for PostgreSQL to be ready
      #   run: |
      #     until : > /dev/tcp/localhost/5432; do
      #       echo -n .
      #       sleep 1
      #     done

      #     echo Success
      # - name: db調整
      #   run: |
      #     echo "DATABASE_URL=postgres://postgres:postgres@localhost:5432/suikoden_election_2022_test" >> $GITHUB_ENV
      # - name: Set env
      #   run: |
      #     echo "POSTGRES_USERNAME_TEST=postgres" >> $GITHUB_ENV
      #     echo "POSTGRES_PASSWORD_TEST=postgres" >> $GITHUB_ENV
      # - name: create record save!
      #   run: |
      #     bundle exec rails runner "Character.new({name: 'ああ', name_en: 'aa'}).save!"
      # - name: puts record!
      #   run: |
      #     bundle exec rails runner "puts Character.count"
      #     bundle exec rails runner "puts Character.first.name"
      #     bundle exec rails runner "puts Character.first.name_en"
      - name: RSpec を実行する 1
        continue-on-error: true
        run: |
          bundle exec rspec
        env:
          DATABASE_URL: 'postgres://test:password@localhost/suikoden_election_2022_test'
        # env:
        #   RAILS_ENV: test
        #   # POSTGRES_HOST: postgres
        #   # POSTGRES_HOST_TEST: postgres
        #   POSTGRES_USERNAME_TEST: postgres
        #   POSTGRES_PASSWORD_TEST: postgres
        # env:
          # POSTGRES_HOST: localhost
          # POSTGRES_PORT: 5432
          # POSTGRES_USERNAME_TEST: postgres
      # - name: RSpec を実行する 2
      #   continue-on-error: true
      #   run: |
      #     bundle exec rspec spec/models/user_spec.rb
      #   env:
      #     RAILS_ENV: test
      #     # POSTGRES_HOST: localhost
      #     # POSTGRES_HOST_TEST: localhost
      #     POSTGRES_USERNAME_TEST: postgres
      #     POSTGRES_PASSWORD_TEST: postgres
        # env:
          # POSTGRES_HOST_TEST: localhost
          # POSTGRES_PORT_TEST: 5432
          # POSTGRES_USERNAME_TEST: postgres

          # RAILS_ENV: test
          # POSTGRES_HOST_TEST: 127.0.0.1
          # POSTGRES_USERNAME_TEST: username
          # POSTGRES_PASSWORD_TEST: password
          # POSTGRES_HOST: localhost
          # POSTGRES_PORT: 5432
          # POSTGRES_HOST: localhost
          # POSTGRES_HOST: postgres
          # POSTGRES_PORT: 5432
          # POSTGRES_HOST_TEST: postgres
          # POSTGRES_HOST_TEST: localhost
          # POSTGRES_PORT_TEST: 5432
          # POSTGRES_USERNAME_TEST: postgres
          # POSTGRES_PASSWORD_TEST: postgres

          # const pgclient = new Client({
          #     host: process.env.POSTGRES_HOST,
          #     port: process.env.POSTGRES_PORT,
          #     user: 'postgres',
          #     password: 'postgres',
          #     database: 'postgres'
          # });
          # https://docs.github.com/ja/enterprise-server@3.1/actions/using-containerized-services/creating-postgresql-service-containers