const createTweetCountingSheets = () => {
  // „Ç∑„Éº„Éà„ÅÆ‰ΩúÊàê„Å®Á†¥Â£ä
  if (false) {
    if (false) {
      const sheetNames = ZzzSheetNames.allSheetNames
      sheetNames.forEach(sheetName => {
        ZzzSheetOperations.removeSheet(sheetName)
      })
      console.log('„Ç∑„Éº„Éà„ÇíÂâäÈô§„Åó„Åæ„Åó„Åü')
    }

    createInitialSheets()
    console.log('„Ç∑„Éº„Éà„Çí‰ΩúÊàê„Åó„Åæ„Åó„Åü')
  }

  // ÂàóÂêç„ÇíÂÖ•Âäõ„Åô„Çã
  // setColumnNames()
  console.log('[DONE] setColumnNames')

  // ÂàóÂπÖ„ÇíË™øÊï¥„Åô„Çã
  // setColumnWidths()
  console.log('[DONE] setColumnWidths')

  // 102Ë°åÁõÆ„ÅÆÂêÑ„Çª„É´„Å´ '@' „ÇíÂÖ•„Çå„Çã
  // setBanpeis()
  console.log('[DONE] setBanpeis')

  // „Ç∑„Éº„Éà„ÅÆ‰øùË≠∑Ê©üËÉΩ„ÇíÈÅ©Áî®„Åô„Çã
  // setProtectedCells()
  console.log('[DONE] setProtectedCells')

  // „ÉÅ„Çß„ÉÉ„ÇØ„Éú„ÉÉ„ÇØ„Çπ„Çí‰ΩúÊàê„Åô„Çã
  createCheckBoxes()
  console.log('[DONE] createCheckBoxes')

  // Êäò„ÇäËøî„Åó„ÅÆ„Çø„Ç§„Éó„ÇíË®≠ÂÆö„Åô„Çã
  // setRappings()
  console.log('[DONE] setRappings')

  // „ÄåÊù°‰ª∂‰ªò„ÅçÊõ∏Âºè„Äç„ÇíË®≠ÂÆö„Åô„Çã
  setDefaultConditionalFormats()
  console.log('[DONE] setDefaultConditionalFormats')

  // ÂÆüË°å„Å´ÂáÑ„Åæ„Åò„ÅÑÊôÇÈñì„Åå„Åã„Åã„Çã„ÅÆ„ÅßÂà•Êû†„Åß„ÇÇ„ÅÑ„ÅÑ
  // ÁâπÂÆö„ÅÆÊù°‰ª∂„ÅßË°åÂÖ®‰Ωì„ÇíÁÅ∞Ëâ≤„Å´„Åô„Çã
  // setGrayBackGroundInSpecificCondition()
  // console.log('[DONE] setGrayBackGroundInSpecificCondition')
}

const createInitialSheets = () => {
  const sheetNames = ZzzSheetNames.allSheetNames

  sheetNames.forEach(sheetName => {
    ZzzSheetOperations.createSheet({newSheetName: sheetName})

    // „É≠„Éº„É´„Éê„ÉÉ„ÇØÔºà„Éá„Éº„ÇøÂâäÈô§„ÅåÁô∫Áîü„Åó„ÄÅÂç±Èô∫Ôºâ
    // ZzzSheetOperations.removeSheet(sheetName)
  })
}

const setColumnNames = () => {
  // „Ç´„É©„É†„ÅÆÂêçÂâç„Çí„Çª„É´„Å´„Çª„ÉÉ„Éà„Åô„ÇãÔºàÊú¨Êù•„Éá„Éº„Çø„ÅØ Apps Script ÂÅ¥„ÅßÂÖ•„Çå„Å™„ÅÑ„Åå„ÄÅ„Åì„Çå„ÅØ‰æãÂ§ñÔºâ
  // ÔºàAÂàó„ÅÆ id „ÇíÂÖ•„Çå„Çã„ÅÆ„ÇÇ Ruby „ÅÆ‰ªï‰∫ã„Å™„ÅÆ„Åß„ÄÅ„Éá„Éº„ÇøËá™‰Ωì„ÅØ Apps Script „Åß„ÅØÂÖ•„Çå„Å™„ÅÑÔºâ
  const sheetNames = ZzzSheetNames.allSheetNames

  sheetNames.forEach(sheetName => {
    const sheet = ZzzSheetOperations.changeActiveSheetTo(sheetName)

    ZzzCellOperations.setFirstRowNames(sheet)

    // ‰∏ÄË°åÁõÆ „Åä„Çà„Å≥ ‰∏ÄÂàóÁõÆ „ÇíÂõ∫ÂÆö„Çí„Åô„Çã
    ZzzCellOperations.freezeFirstRow(sheet)
    ZzzCellOperations.freezeFirstColumn(sheet)
  })
}

const setColumnWidths = () => {
  const sheetNames = ZzzSheetNames.allSheetNames
  const allColumnNames = ZzzColumnNames.columnNamesOnCountingSheet
  const columNameVsColumnNumber = ZzzSheetOperations.columnNameVsColumnNumber(allColumnNames)

  // ÂàóÂπÖ„ÇíÊåáÂÆö„Åô„Çã
  sheetNames.forEach(sheetName => {
    const sheet = ZzzSheetOperations.changeActiveSheetTo(sheetName)

    sheet.setColumnWidth(columNameVsColumnNumber['ID'], 40)
    sheet.setColumnWidth(columNameVsColumnNumber['screen_name'], 30)
    sheet.setColumnWidth(columNameVsColumnNumber['tweet_id'], 30)
    sheet.setColumnWidth(columNameVsColumnNumber['Êó•ÊôÇ'], 30)
    sheet.setColumnWidth(columNameVsColumnNumber['URL'], 30)
    sheet.setColumnWidth(columNameVsColumnNumber['„ÉÑ„Ç§„Éº„Éà„ÅåË¶ã„Çâ„Çå„Å™„ÅÑÔºü'], 155)
    sheet.setColumnWidth(columNameVsColumnNumber['ÂÇôËÄÉ'], 100)
    sheet.setColumnWidth(columNameVsColumnNumber['Ë¶Å„É¨„Éì„É•„ÉºÔºü'], 90)
    sheet.setColumnWidth(columNameVsColumnNumber['‰∫åÊ¨°„ÉÅ„Çß„ÉÉ„ÇØÊ∏àÔºü'], 130)
    sheet.setColumnWidth(columNameVsColumnNumber['ÂÖ®„ÉÅ„Çß„ÉÉ„ÇØÁµÇ‰∫ÜÔºü'], 120)
    sheet.setColumnWidth(columNameVsColumnNumber['ÈõÜË®àÂØæË±°Â§ñÔºü'], 90)
    sheet.setColumnWidth(columNameVsColumnNumber['„Åµ„ÅÅ„ÅºÊ∏àÔºü'], 90)
    sheet.setColumnWidth(columNameVsColumnNumber['Âà•„ÉÑ„Ç§„Éº„Éà'], 40)
    sheet.setColumnWidth(columNameVsColumnNumber['ÂÜÖÂÆπ'], 200)
    sheet.setColumnWidth(columNameVsColumnNumber['„Ç≠„É£„É©1'], 140)
    sheet.setColumnWidth(columNameVsColumnNumber['„Ç≠„É£„É©2'], 140)
    sheet.setColumnWidth(columNameVsColumnNumber['„Ç≠„É£„É©3'], 140)
  })
}

// Êó¢Â≠ò„Éá„Éº„Çø„Çí‰∏äÊõ∏„Åç„Åô„ÇãÁ†¥Â£äÁöÑ„É°„ÇΩ„ÉÉ„Éâ„Å™„ÅÆ„ÅßÊ≥®ÊÑè„Åô„Çã
const setBanpeis = () => {
  const sheetNames = ZzzSheetNames.allSheetNames

  // 102Ë°åÁõÆ„ÅÆÂêÑ„Çª„É´„Å´ '@' „ÇíÂÖ•„Çå„Çã
  sheetNames.forEach(sheetName => {
    const sheet = ZzzSheetOperations.changeActiveSheetTo(sheetName)

    ZzzCellOperations.setLastRowSymbols(sheet)
  })
}

const setProtectedCells = () => {
  const sheetNames = ZzzSheetNames.allSheetNames
  const allColumnNames = ZzzColumnNames.columnNamesOnCountingSheet
  const columNameVsColumnNumber = ZzzSheetOperations.columnNameVsColumnNumber(allColumnNames)

  // „Ç∑„Éº„Éà„Çí„ÇÜ„Çã„Åè‰øùË≠∑„Åô„Çã
  sheetNames.forEach(sheetName => {
    const sheet = ZzzSheetOperations.changeActiveSheetTo(sheetName)

    const protectedColumnNumbers = [
      columNameVsColumnNumber['ID'],
      columNameVsColumnNumber['screen_name'],
      columNameVsColumnNumber['tweet_id'],
      columNameVsColumnNumber['Êó•ÊôÇ'],
      columNameVsColumnNumber['URL'],
      columNameVsColumnNumber['ÂÖ®„ÉÅ„Çß„ÉÉ„ÇØÁµÇ‰∫ÜÔºü'],
      columNameVsColumnNumber['Âà•„ÉÑ„Ç§„Éº„Éà'],
    ]

    protectedColumnNumbers.forEach(protectedColumnNumber => {
      const range = ZzzCellOperations.getRangeSpecificColumnRow2ToRow101(protectedColumnNumber, sheet)

      range.protect() // „Éá„Éï„Ç©„É´„Éà„Åß„ÅØËá™ÂàÜ„Å®Ëá™ÂàÜ„ÅÆ„Ç∞„É´„Éº„Éó„ÅÆ„Åø„ÅåÁ∑®ÈõÜÂèØËÉΩÔºà„Å™„ÅÆ„ÅßÂ§ßÊäµ„ÅØ„Åì„Çå„Åß„ÅÑ„ÅÑÔºâ
    })
  })
}

// Êó¢Â≠ò„Éá„Éº„Çø„Çí‰∏äÊõ∏„Åç„Åô„ÇãÁ†¥Â£äÁöÑ„É°„ÇΩ„ÉÉ„Éâ„Å™„ÅÆ„ÅßÊ≥®ÊÑè„Åô„Çã
const createCheckBoxes = () => {
  const sheetNames = ZzzSheetNames.allSheetNames
  const allColumnNames = ZzzColumnNames.columnNamesOnCountingSheet
  const columNameVsColumnNumber = ZzzSheetOperations.columnNameVsColumnNumber(allColumnNames)

  // „ÉÅ„Çß„ÉÉ„ÇØ„Éú„ÉÉ„ÇØ„Çπ„ÇíÂÖ•„Çå„Çã
  sheetNames.forEach(sheetName => {
    const sheet = ZzzSheetOperations.changeActiveSheetTo(sheetName)

    const requiredCheckboxColumnNumbers = [
      columNameVsColumnNumber['„ÉÑ„Ç§„Éº„Éà„ÅåË¶ã„Çâ„Çå„Å™„ÅÑÔºü'],
      columNameVsColumnNumber['ÈõÜË®àÂØæË±°Â§ñÔºü'],
      columNameVsColumnNumber['„Åµ„ÅÅ„ÅºÊ∏àÔºü'],
      columNameVsColumnNumber['‰∫åÊ¨°„ÉÅ„Çß„ÉÉ„ÇØÊ∏àÔºü'],
      columNameVsColumnNumber['Ë¶Å„É¨„Éì„É•„ÉºÔºü'],
    ]

    requiredCheckboxColumnNumbers.forEach(requiredCheckboxColumnNumber => {
      const range = ZzzCellOperations.getRangeSpecificColumnRow2ToRow101(requiredCheckboxColumnNumber, sheet)

      ZzzCellOperations.createCheckBoxes(range)
    })
  })
}

// Ë°®Á§∫ÂΩ¢Âºè -> „É©„ÉÉ„Éî„É≥„Ç∞ -> „ÅØ„ÅøÂá∫„Åô | Êäò„ÇäËøî„Åô | Âàá„ÇäË©∞„ÇÅ„Çã
const setRappings = () => {
  const sheetNames = ZzzSheetNames.allSheetNames
  const allColumnNames = ZzzColumnNames.columnNamesOnCountingSheet
  const columNameVsColumnNumber = ZzzSheetOperations.columnNameVsColumnNumber(allColumnNames)

  sheetNames.forEach(sheetName => {
    const sheet = ZzzSheetOperations.changeActiveSheetTo(sheetName)

    const kiritsumeruColumnNumbers = [
      columNameVsColumnNumber['screen_name'],
      columNameVsColumnNumber['tweet_id'],
      columNameVsColumnNumber['Êó•ÊôÇ'],
      columNameVsColumnNumber['URL'],
      columNameVsColumnNumber['Âà•„ÉÑ„Ç§„Éº„Éà'],
    ]

    kiritsumeruColumnNumbers.forEach(requiredColumnNumber => {
      const range = ZzzCellOperations.getRangeSpecificColumnRow2ToRow101(requiredColumnNumber, sheet)

      ZzzCellOperations.rappingKiritsumeru(range)
    })

    const orikaesuColumnNumbers = [
      columNameVsColumnNumber['ÂÜÖÂÆπ'],
      columNameVsColumnNumber['ÂÇôËÄÉ'],
    ]

    orikaesuColumnNumbers.forEach(requiredColumnNumber => {
      const range = ZzzCellOperations.getRangeSpecificColumnRow2ToRow101(requiredColumnNumber, sheet)

      ZzzCellOperations.rappingOrikaesu(range)
    })
  })
}

// Èï∑„Åô„Åé„Çã„ÅÆ„Åß„ÄåÂàó„Äç„Åî„Å®„Å´„ÅÜ„Åæ„ÅèÂàÜ„Åë„Åü„ÅÑ
const setDefaultConditionalFormats = () => {
// const setDefaultValuesToSpecificColumns = () => {
  const sheetNames = ZzzSheetNames.allSheetNames
  const allColumnNames = ZzzColumnNames.columnNamesOnCountingSheet
  const columNameVsColumnNumber = ZzzSheetOperations.columnNameVsColumnNumber(allColumnNames)

  const requiredReviewColumnNumber = columNameVsColumnNumber['Ë¶Å„É¨„Éì„É•„ÉºÔºü']
  const requiredReviewColumnAlphabet = ZzzConverters.convertColumnNumberToAlphabet(requiredReviewColumnNumber)

  const completedSecondCheckColumnNumber = columNameVsColumnNumber['‰∫åÊ¨°„ÉÅ„Çß„ÉÉ„ÇØÊ∏àÔºü']
  const completedSecondCheckAlphabet = ZzzConverters.convertColumnNumberToAlphabet(completedSecondCheckColumnNumber)

  const formula = `=IF(AND(${requiredReviewColumnAlphabet}2=FALSE,${completedSecondCheckAlphabet}2=TRUE),"üåû","‚òî")`

  // „ÄåÂÖ®„ÉÅ„Çß„ÉÉ„ÇØÁµÇ‰∫ÜÔºü„ÄçÂàó
  sheetNames.forEach(sheetName => {
    const sheet = ZzzSheetOperations.changeActiveSheetTo(sheetName)
    const range = ZzzCellOperations.getRangeSpecificColumnRow2ToRow101(
      columNameVsColumnNumber['ÂÖ®„ÉÅ„Çß„ÉÉ„ÇØÁµÇ‰∫ÜÔºü'],
      sheet
    )

    range.setValue(formula) // ÂàùÊúüÂÄ§„ÇíË®≠ÂÆö„Åô„Çã

    ZzzConditionalFormats.setColorToRangeInSpecificCondition(
      range,
      sheet,
      'üåû',
      '#ccffcc' // Green
    )
    ZzzConditionalFormats.setColorToRangeInSpecificCondition(
      range,
      sheet,
      '‚òî',
      '#ffc0cb' // Red
    )
  })

  // „ÄåË¶Å„É¨„Éì„É•„ÉºÔºü„ÄçÂàó
  sheetNames.forEach(sheetName => {
    const sheet = ZzzSheetOperations.changeActiveSheetTo(sheetName)
    const range = ZzzCellOperations.getRangeSpecificColumnRow2ToRow101(
      columNameVsColumnNumber['Ë¶Å„É¨„Éì„É•„ÉºÔºü'],
      sheet
    )

    ZzzConditionalFormats.setColorToRangeInSpecificCondition(
      range,
      sheet,
      'TRUE',
      '#ffc0cb' // Red
    )
  })

  // „Äå‰∫åÊ¨°„ÉÅ„Çß„ÉÉ„ÇØÊ∏àÔºü„ÄçÂàó
  sheetNames.forEach(sheetName => {
    const sheet = ZzzSheetOperations.changeActiveSheetTo(sheetName)
    const range = ZzzCellOperations.getRangeSpecificColumnRow2ToRow101(
      columNameVsColumnNumber['‰∫åÊ¨°„ÉÅ„Çß„ÉÉ„ÇØÊ∏àÔºü'],
      sheet
    )

    ZzzConditionalFormats.setColorToRangeInSpecificCondition(
      range,
      sheet,
      'TRUE',
      '#ccffcc' // Red
    )

    ZzzConditionalFormats.setColorToRangeInSpecificCondition(
      range,
      sheet,
      'FALSE',
      '#ffc0cb' // Red
    )
  })

  // „Äå„Åµ„ÅÅ„ÅºÊ∏àÔºü„ÄçÂàó
  sheetNames.forEach(sheetName => {
    const sheet = ZzzSheetOperations.changeActiveSheetTo(sheetName)
    const range = ZzzCellOperations.getRangeSpecificColumnRow2ToRow101(
      columNameVsColumnNumber['„Åµ„ÅÅ„ÅºÊ∏àÔºü'],
      sheet
    )

    ZzzConditionalFormats.setColorToRangeInSpecificCondition(
      range,
      sheet,
      'TRUE',
      '#ccffcc' // Red
    )

    ZzzConditionalFormats.setColorToRangeInSpecificCondition(
      range,
      sheet,
      'FALSE',
      '#ffc0cb' // Red
    )
  })
}

// ÂÆüË°å„Å´Êï∞ÂçÅÂàÜ‰ª•‰∏ä„Åã„Åã„Çã
const setGrayBackGroundInSpecificCondition = () => {
  const sheetNames = ZzzSheetNames.allSheetNames
  const allColumnNames = ZzzColumnNames.columnNamesOnCountingSheet
  const columNameVsColumnNumber = ZzzSheetOperations.columnNameVsColumnNumber(allColumnNames)

  let columnAlphabet: string

  sheetNames.forEach(sheetName => {
    const sheet = ZzzSheetOperations.changeActiveSheetTo(sheetName)

    for (let i = 2; i <= 101; i++) {
      columnAlphabet = ZzzConverters.convertColumnNumberToAlphabet(columNameVsColumnNumber['ÈõÜË®àÂØæË±°Â§ñÔºü'])

      ZzzConditionalFormats.setGrayBackgroundToAllRowCellsInSpecificCondition(
        i,
        sheet,
        `=$${columnAlphabet}$${i}=TRUE`
      )

      columnAlphabet = ZzzConverters.convertColumnNumberToAlphabet(columNameVsColumnNumber['„ÉÑ„Ç§„Éº„Éà„ÅåË¶ã„Çâ„Çå„Å™„ÅÑÔºü'])

      ZzzConditionalFormats.setGrayBackgroundToAllRowCellsInSpecificCondition(
        i,
        sheet,
        `=$${columnAlphabet}$${i}=TRUE`
      )
    }
  })
}
