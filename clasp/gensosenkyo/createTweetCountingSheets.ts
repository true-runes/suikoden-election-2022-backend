namespace createTweetCountingSheets {
  export const createAllSheets = () => {
    const sheetNames = ZzzSheetNames.allSheetNames

    // „Å®„Å¶„ÇÇ„Ç≥„Çπ„Éà„ÅåÈ´ò„ÅÑÂÆüË°åÂÜÖÂÆπ
    sheetNames.forEach(sheetName => {
      ZzzSheetOperations.createSheet({newSheetName: sheetName})
    })

    return sheetNames
  }

  export const destroyAllSheets = () => {
    const sheetNames = ZzzSheetNames.allSheetNames

    sheetNames.forEach(removeSheet => {
      ZzzSheetOperations.removeSheet(removeSheet)
    })

    return sheetNames
  }

  export const setColumnNames = () => {
    const sheetNames = ZzzSheetNames.forCountingSheetNames

    sheetNames.forEach(sheetName => {
      const sheet = ZzzSheetOperations.changeActiveSheetTo(sheetName)

      ZzzCellOperations.setFirstRowNames(sheet)
    })
  }

  export const freezeFirstRowAndFirstColumn = () => {
    ZzzSheetOperations.applyFunctionToAllCountingSheets(
      (sheet: GoogleAppsScript.Spreadsheet.Sheet) => {
        ZzzCellOperations.freezeFirstRow(sheet)
        ZzzCellOperations.freezeFirstColumn(sheet)
      }, '‰∏ÄË°åÁõÆ „Åä„Çà„Å≥ ‰∏ÄÂàóÁõÆ „ÇíÂõ∫ÂÆö„Çí„Åô„Çã'
    )
  }

  export const setColumnWidths = () => {
    const sheetNames = ZzzSheetNames.forCountingSheetNames
    const allColumnNames = ZzzColumnNames.columnNamesOnCountingSheet
    const columNameVsColumnNumber = ZzzSheetOperations.correspondenceObjectAboutColumnNameToColumnNumber(allColumnNames)

    // ÂàóÂπÖ„ÇíÊåáÂÆö„Åô„Çã
    sheetNames.forEach(sheetName => {
      const sheet = ZzzSheetOperations.changeActiveSheetTo(sheetName)

      sheet.setColumnWidth(columNameVsColumnNumber['ID'], 40)
      sheet.setColumnWidth(columNameVsColumnNumber['screen_name'], 30)
      sheet.setColumnWidth(columNameVsColumnNumber['tweet_id'], 30)
      sheet.setColumnWidth(columNameVsColumnNumber['Êó•ÊôÇ'], 30)
      sheet.setColumnWidth(columNameVsColumnNumber['URL'], 30)
      sheet.setColumnWidth(columNameVsColumnNumber['„ÉÑ„Ç§„Éº„Éà„ÅåË¶ã„Çâ„Çå„Å™„ÅÑÔºü'], 155)
      sheet.setColumnWidth(columNameVsColumnNumber['ÂÇôËÄÉ'], 100)
      sheet.setColumnWidth(columNameVsColumnNumber['Ë¶Å„É¨„Éì„É•„ÉºÔºü'], 90)
      sheet.setColumnWidth(columNameVsColumnNumber['‰∫åÊ¨°„ÉÅ„Çß„ÉÉ„ÇØÊ∏àÔºü'], 130)
      sheet.setColumnWidth(columNameVsColumnNumber['ÂÖ®„ÉÅ„Çß„ÉÉ„ÇØÁµÇ‰∫ÜÔºü'], 120)
      sheet.setColumnWidth(columNameVsColumnNumber['ÈõÜË®àÂØæË±°Â§ñÔºü'], 90)
      sheet.setColumnWidth(columNameVsColumnNumber['„Åµ„ÅÅ„ÅºÊ∏àÔºü'], 90)
      sheet.setColumnWidth(columNameVsColumnNumber['Âà•„ÉÑ„Ç§„Éº„Éà'], 40)
      sheet.setColumnWidth(columNameVsColumnNumber['ÂÜÖÂÆπ'], 200)
      sheet.setColumnWidth(columNameVsColumnNumber['„Ç≠„É£„É©1'], 140)
      sheet.setColumnWidth(columNameVsColumnNumber['„Ç≠„É£„É©2'], 140)
      sheet.setColumnWidth(columNameVsColumnNumber['„Ç≠„É£„É©3'], 140)
    })
  }

  // Êó¢Â≠ò„Éá„Éº„Çø„Çí‰∏äÊõ∏„Åç„Åô„ÇãÁ†¥Â£äÁöÑ„É°„ÇΩ„ÉÉ„Éâ„Å™„ÅÆ„ÅßÊ≥®ÊÑè„Åô„Çã
  export const setBanpeis = () => {
    const sheetNames = ZzzSheetNames.forCountingSheetNames

    // 102Ë°åÁõÆ„ÅÆÂêÑ„Çª„É´„Å´ '@' „ÇíÂÖ•„Çå„Çã
    sheetNames.forEach(sheetName => {
      const sheet = ZzzSheetOperations.changeActiveSheetTo(sheetName)

      ZzzCellOperations.setLastRowSymbols(sheet)
    })
  }

  export const setProtectedCells = () => {
    const sheetNames = ZzzSheetNames.forCountingSheetNames
    const allColumnNames = ZzzColumnNames.columnNamesOnCountingSheet
    const columNameVsColumnNumber = ZzzSheetOperations.correspondenceObjectAboutColumnNameToColumnNumber(allColumnNames)

    // „Ç∑„Éº„Éà„Çí„ÇÜ„Çã„Åè‰øùË≠∑„Åô„Çã
    sheetNames.forEach(sheetName => {
      const sheet = ZzzSheetOperations.changeActiveSheetTo(sheetName)

      const protectedColumnNumbers = [
        columNameVsColumnNumber['ID'],
        columNameVsColumnNumber['screen_name'],
        columNameVsColumnNumber['tweet_id'],
        columNameVsColumnNumber['Êó•ÊôÇ'],
        columNameVsColumnNumber['URL'],
        columNameVsColumnNumber['ÂÖ®„ÉÅ„Çß„ÉÉ„ÇØÁµÇ‰∫ÜÔºü'],
        columNameVsColumnNumber['Âà•„ÉÑ„Ç§„Éº„Éà'],
      ]

      protectedColumnNumbers.forEach(protectedColumnNumber => {
        const range = ZzzCellOperations.getRangeSpecificColumnRow2ToRow101(protectedColumnNumber, sheet)

        range.protect() // „Éá„Éï„Ç©„É´„Éà„Åß„ÅØËá™ÂàÜ„Å®Ëá™ÂàÜ„ÅÆ„Ç∞„É´„Éº„Éó„ÅÆ„Åø„ÅåÁ∑®ÈõÜÂèØËÉΩÔºà„Å™„ÅÆ„ÅßÂ§ßÊäµ„ÅØ„Åì„Çå„Åß„ÅÑ„ÅÑÔºâ
      })

      console.log(`[DONE] ${sheetName} : „Ç∑„Éº„Éà‰øùË≠∑Ë®≠ÂÆö`)
    })
  }

  // Êó¢Â≠ò„Éá„Éº„Çø„Çí‰∏äÊõ∏„Åç„Åô„ÇãÁ†¥Â£äÁöÑ„É°„ÇΩ„ÉÉ„Éâ„Å™„ÅÆ„ÅßÊ≥®ÊÑè„Åô„Çã
  export const createCheckBoxes = () => {
    const sheetNames = ZzzSheetNames.forCountingSheetNames
    const allColumnNames = ZzzColumnNames.columnNamesOnCountingSheet
    const columNameVsColumnNumber = ZzzSheetOperations.correspondenceObjectAboutColumnNameToColumnNumber(allColumnNames)

    // „ÉÅ„Çß„ÉÉ„ÇØ„Éú„ÉÉ„ÇØ„Çπ„ÇíÂÖ•„Çå„Çã
    sheetNames.forEach(sheetName => {
      const sheet = ZzzSheetOperations.changeActiveSheetTo(sheetName)

      const requiredCheckboxColumnNumbers = [
        columNameVsColumnNumber['„ÉÑ„Ç§„Éº„Éà„ÅåË¶ã„Çâ„Çå„Å™„ÅÑÔºü'],
        columNameVsColumnNumber['ÈõÜË®àÂØæË±°Â§ñÔºü'],
        columNameVsColumnNumber['„Åµ„ÅÅ„ÅºÊ∏àÔºü'],
        columNameVsColumnNumber['‰∫åÊ¨°„ÉÅ„Çß„ÉÉ„ÇØÊ∏àÔºü'],
        columNameVsColumnNumber['Ë¶Å„É¨„Éì„É•„ÉºÔºü'],
      ]

      requiredCheckboxColumnNumbers.forEach(requiredCheckboxColumnNumber => {
        const range = ZzzCellOperations.getRangeSpecificColumnRow2ToRow101(requiredCheckboxColumnNumber, sheet)

        ZzzCellOperations.createCheckBoxes(range)
      })
    })
  }

  // Ë°®Á§∫ÂΩ¢Âºè -> „É©„ÉÉ„Éî„É≥„Ç∞ -> „ÅØ„ÅøÂá∫„Åô | Êäò„ÇäËøî„Åô | Âàá„ÇäË©∞„ÇÅ„Çã
  export const setRappings = () => {
    const sheetNames = ZzzSheetNames.forCountingSheetNames
    const allColumnNames = ZzzColumnNames.columnNamesOnCountingSheet
    const columNameVsColumnNumber = ZzzSheetOperations.correspondenceObjectAboutColumnNameToColumnNumber(allColumnNames)

    sheetNames.forEach(sheetName => {
      const sheet = ZzzSheetOperations.changeActiveSheetTo(sheetName)

      const kiritsumeruColumnNumbers = [
        columNameVsColumnNumber['screen_name'],
        columNameVsColumnNumber['tweet_id'],
        columNameVsColumnNumber['Êó•ÊôÇ'],
        columNameVsColumnNumber['URL'],
        columNameVsColumnNumber['Âà•„ÉÑ„Ç§„Éº„Éà'],
      ]

      kiritsumeruColumnNumbers.forEach(requiredColumnNumber => {
        const range = ZzzCellOperations.getRangeSpecificColumnRow2ToRow101(requiredColumnNumber, sheet)

        ZzzCellOperations.rappingKiritsumeru(range)
      })

      const orikaesuColumnNumbers = [
        columNameVsColumnNumber['ÂÜÖÂÆπ'],
        columNameVsColumnNumber['ÂÇôËÄÉ'],
      ]

      orikaesuColumnNumbers.forEach(requiredColumnNumber => {
        const range = ZzzCellOperations.getRangeSpecificColumnRow2ToRow101(requiredColumnNumber, sheet)

        ZzzCellOperations.rappingOrikaesu(range)
      })
    })
  }

  // Èï∑„Åô„Åé„Çã„ÅÆ„Åß„ÄåÂàó„Äç„Åî„Å®„Å´„ÅÜ„Åæ„ÅèÂàÜ„Åë„Åü„ÅÑ
  export const setDefaultConditionalFormats = () => {
    const sheetNames = ZzzSheetNames.forCountingSheetNames
    const allColumnNames = ZzzColumnNames.columnNamesOnCountingSheet
    const columNameVsColumnNumber = ZzzSheetOperations.correspondenceObjectAboutColumnNameToColumnNumber(allColumnNames)

    const requiredReviewColumnNumber = columNameVsColumnNumber['Ë¶Å„É¨„Éì„É•„ÉºÔºü']
    const requiredReviewColumnAlphabet = ZzzConverters.convertColumnNumberToAlphabet(requiredReviewColumnNumber)

    const completedSecondCheckColumnNumber = columNameVsColumnNumber['‰∫åÊ¨°„ÉÅ„Çß„ÉÉ„ÇØÊ∏àÔºü']
    const completedSecondCheckAlphabet = ZzzConverters.convertColumnNumberToAlphabet(completedSecondCheckColumnNumber)

    const formula = `=IF(AND(${requiredReviewColumnAlphabet}2=FALSE,${completedSecondCheckAlphabet}2=TRUE),"üåû","‚òî")`

    // „ÄåÂÖ®„ÉÅ„Çß„ÉÉ„ÇØÁµÇ‰∫ÜÔºü„ÄçÂàó
    sheetNames.forEach(sheetName => {
      const sheet = ZzzSheetOperations.changeActiveSheetTo(sheetName)
      const range = ZzzCellOperations.getRangeSpecificColumnRow2ToRow101(
        columNameVsColumnNumber['ÂÖ®„ÉÅ„Çß„ÉÉ„ÇØÁµÇ‰∫ÜÔºü'],
        sheet
      )

      // '‚òî' „Å®„ÅÑ„ÅÜÂàùÊúüÂÄ§„ÇíË®≠ÂÆö„Åô„Çã
      range.setValue(formula)
      range.setHorizontalAlignment('center');

      ZzzConditionalFormats.setColorToRangeInSpecificCondition(
        range,
        sheet,
        'üåû',
        '#ccffcc' // Green
      )
      ZzzConditionalFormats.setColorToRangeInSpecificCondition(
        range,
        sheet,
        '‚òî',
        '#ffc0cb' // Red
      )
    })

    // „ÄåË¶Å„É¨„Éì„É•„ÉºÔºü„ÄçÂàó
    sheetNames.forEach(sheetName => {
      const sheet = ZzzSheetOperations.changeActiveSheetTo(sheetName)
      const range = ZzzCellOperations.getRangeSpecificColumnRow2ToRow101(
        columNameVsColumnNumber['Ë¶Å„É¨„Éì„É•„ÉºÔºü'],
        sheet
      )

      ZzzConditionalFormats.setColorToRangeInSpecificCondition(
        range,
        sheet,
        'TRUE',
        '#ffc0cb' // Red
      )
    })

    // „Äå‰∫åÊ¨°„ÉÅ„Çß„ÉÉ„ÇØÊ∏àÔºü„ÄçÂàó
    sheetNames.forEach(sheetName => {
      const sheet = ZzzSheetOperations.changeActiveSheetTo(sheetName)
      const range = ZzzCellOperations.getRangeSpecificColumnRow2ToRow101(
        columNameVsColumnNumber['‰∫åÊ¨°„ÉÅ„Çß„ÉÉ„ÇØÊ∏àÔºü'],
        sheet
      )

      ZzzConditionalFormats.setColorToRangeInSpecificCondition(
        range,
        sheet,
        'TRUE',
        '#ccffcc' // Red
      )

      ZzzConditionalFormats.setColorToRangeInSpecificCondition(
        range,
        sheet,
        'FALSE',
        '#ffc0cb' // Red
      )
    })

    // „Äå„Åµ„ÅÅ„ÅºÊ∏àÔºü„ÄçÂàó
    sheetNames.forEach(sheetName => {
      const sheet = ZzzSheetOperations.changeActiveSheetTo(sheetName)
      const range = ZzzCellOperations.getRangeSpecificColumnRow2ToRow101(
        columNameVsColumnNumber['„Åµ„ÅÅ„ÅºÊ∏àÔºü'],
        sheet
      )

      ZzzConditionalFormats.setColorToRangeInSpecificCondition(
        range,
        sheet,
        'TRUE',
        '#ccffcc' // Red
      )

      ZzzConditionalFormats.setColorToRangeInSpecificCondition(
        range,
        sheet,
        'FALSE',
        '#ffc0cb' // Red
      )
    })
  }

  export const setGrayBackGroundInSpecificCondition = () => {
    const sheetNames = ZzzSheetNames.forCountingSheetNames
    const allColumnNames = ZzzColumnNames.columnNamesOnCountingSheet
    const columNameVsColumnNumber = ZzzSheetOperations.correspondenceObjectAboutColumnNameToColumnNumber(allColumnNames)

    let columnAlphabet: string
    let newRule: GoogleAppsScript.Spreadsheet.ConditionalFormatRule

    sheetNames.forEach(sheetName => {
      const sheet = ZzzSheetOperations.changeActiveSheetTo(sheetName)
      const rules = sheet.getConditionalFormatRules()

      for (let i = 2; i <= 101; i++) {
        columnAlphabet = ZzzConverters.convertColumnNumberToAlphabet(columNameVsColumnNumber['ÈõÜË®àÂØæË±°Â§ñÔºü'])

        newRule = ZzzConditionalFormats.getRuleToSetGrayBackgroundToAllRowCellsInSpecificCondition(
          i,
          sheet,
          `=$${columnAlphabet}$${i}=TRUE`,
          sheet.getRange(i, 1, 1, 100)
        )
        rules.push(newRule)

        columnAlphabet = ZzzConverters.convertColumnNumberToAlphabet(columNameVsColumnNumber['„ÉÑ„Ç§„Éº„Éà„ÅåË¶ã„Çâ„Çå„Å™„ÅÑÔºü'])

        newRule = ZzzConditionalFormats.getRuleToSetGrayBackgroundToAllRowCellsInSpecificCondition(
          i,
          sheet,
          `=$${columnAlphabet}$${i}=TRUE`,
          sheet.getRange(i, 1, 1, 100)
        )
        rules.push(newRule)
      }

      sheet.setConditionalFormatRules(rules)

      console.log(`[END] ${sheetName} : setGrayBackGroundInSpecificCondition`)
    })
  }
}
